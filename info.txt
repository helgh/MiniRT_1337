if adding vector to point the result is a new point

if subtract vector from a point the result is a new point

if subtract point from a vector or a vector from vector or a point from point the result is a new vector

translation matrix ==>  transformation thats moves a point, it changes the cordonates of the point by adding to or subtracting from them.

if take inverse of translation matrix we can get translation matrix thats moves points in reverse

multiplying a translation matrix by a vector should not change the vector!

when multiplied translation matrix by a vector, the 0 in w causes those translation values to disappear

translation matrix structred :

[1  0  0  x]
[0  1  0  y]
[0  0  1  z]
[0  0  0  1]

scaling matrix ==>   scaling moves points by multiplication, when applied to an object centered at the origin, this transformation scales all points on the object,
						effectively making it larger (if the scale value is greater than 1) or smaller (if the scale value is less than 1), as shown in the figure.

unlike translation, scaling applies to vectors as well changing their length

multiplying a tuple by the inverse of a scaling matrix will scale the tuple in the oppsite way.

Reflection is essentially the same thing as scaling by a negative value.

scaling matrix structred :

[x  0  0  0]
[0  y  0  0]
[0  0  z  0]
[0  0  0  1]

rotation matrix ==>   multiplying a tuple by a rotation matrix around an axis will rotate that tuple around an axis.

Rotation matrices depend on the sine and cosine functions from trigonometry.

The rotation will appear to be clockwise around the corresponding axis when viewed along that axis.

Each of the three axes requires a different matrix to implement the rotation.

the inverse of this rotation matrix simply rotates in the opposite direction.

rotation_x matrix structred :

[1  0       0        0]
[0  cos(r)  -sin(r)  0]
[0  sin(r)  cos(r)   0]
[0  0       0        1]

rotation_y matrix structred :

[cos(r)  0  sin(r)   0]
[0       1  0        0]
[-sin(r) 0  cos(r)   0]
[0       0  0        1]

rotation_z matrix structred :

[cos(r)  -sin(r)  0   0]
[sin(r)  cos(r)       0]
[0       0        1   0]
[0       0        0   1]

shearing (or skew) matrix ==>   transformation has the effect of making straight lines slanted.

when applied to a tuple, a shearing transformation changes each component of the tuple in proportion tod the other two components.

the x component changes in proportion to y and z.
the y component changes in proportion to x and z.
the z component changes in proportion to x and y.

shearing matrix structred :

[1     	   x(y)     x(z)     0]
[y(x)  	   1        y(z)     0]
[z(x)      z(y)     1        0]
[0         0        0        1]

chained transformation ==>  Chained transformations must be applied in reverse order.
